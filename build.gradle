///////////////////////////////////////////////////////////////////////////////
//
// Build Script for building JavaPOS Configuration Loader (JCL) Library
//
// Author: denis.kuniss@wincor-nixdorf.com (2016)
//
///////////////////////////////////////////////////////////////////////////////

plugins {
	id 'java'
	id 'eclipse'
//  id 'maven' // comment this in and the next line out for populating to a local Maven repository for testing purposes
    id 'com.github.oehme.sobula.bintray-release' version '0.6.7'
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.11'
}


///////////////////////////////////////////////////////////////////////////////
// Names and Versions
///////////////////////////////////////////////////////////////////////////////

def artifactName = 'javapos-config-loader'
def groupId='org.javapos'
def version='2.2.0'


///////////////////////////////////////////////////////////////////////////////
// Build Dependencies
///////////////////////////////////////////////////////////////////////////////

repositories {
	jcenter()
	if (project.plugins.hasPlugin('maven')) 
	{ // evaluates only at development environment, not at travis-ci.org
	    maven {
	        url "file:$localTestFileRepositoryDir"
	        // localTestFileRepositoryDir must be defined in gradle.properties
	    }
	}
}

dependencies {
	compile 'xerces:xerces:1.2.3'
	compile 'org.javapos:javapos-contracts:0.1.+'
}


///////////////////////////////////////////////////////////////////////////////
// Build Tasks
///////////////////////////////////////////////////////////////////////////////

sourceCompatibility = '1.5' // this defines the lowest JVM version this library may be used with

// this is to request the best matching JDK (currently 1.5) for compiling in Eclipse 
// it is recommended to install a JDK which matches best to avoid applying APIs methods and types not available in specified JVM compatibility version  
eclipse.classpath {
	containers.clear()
	containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-$sourceCompatibility"
}

jar {
	baseName = artifactName
	manifest {
        attributes('Specification-Title': 'UnifiedPOS Standard',
				   'Specification-Vendor': 'UnifiedPOS Committee',
                   'Implementation-Title': 'JavaPOS Configuration Loader',
				   'Implementation-Vendor': 'github.com/JavaPOSWorkingGroup',
                   'Implementation-Version': version,
                   'Main-Class': 'jpos.config.Version')
    }
	
}


///////////////////////////////////////////////////////////////////////////////
// Artifact Upload
///////////////////////////////////////////////////////////////////////////////

if (project.plugins.hasPlugin('com.github.oehme.sobula.bintray-release')) 
{ // evaluates only on travis-ci.org for releasing

    group = "org.javapos"
    description = "JavaPOS Configuration Loader Library"
     
    contacts {
        "builder@javapos.org" {
            moniker "JavaPOS Working Group"
            roles "owner"
            github "JavaPOSWorkingGroup"
        }
    }
    
    bintray.user = "javaposworkinggroup"
    bintray.pkg.version.mavenCentralSync.user = "kuniss"
    bintray.pkg.version.mavenCentralSync.sync = false
}

if (project.plugins.hasPlugin('maven')) 
{ // evaluates only at development environment, not at travis-ci.org

	artifacts {
		archives jar
	}
	
	uploadArchives {
	    repositories {
	        mavenDeployer {
	            repository(url: "file:$localTestFileRepositoryDir")
	            pom.artifactId = artifactName
	            pom.groupId = groupId
	            pom.version = version
	        }
	    }
	}
}




///////////////////////////////////////////////////////////////////////////////
// Source Import
///////////////////////////////////////////////////////////////////////////////

// The following is for importing the source code initially; it does not take 
// part of a release build
  
// javaposImportDir must be defined in the gradle.properties file
def jclSourceDir ="$javaposImportDir/jcl${version}/src"

task importSources {
	description = 'Copies the sources from an official JCL source distribution archive into this projectout of the current version of the project.'
	
	doLast {
		assert file(jclSourceDir).exists(), "import archive '$jclSourceDir' does not exist"
		copy {
			from (jclSourceDir) {
				exclude 'jpos/loader/JposServiceInstance.java' 	// is in project 'JavaPOSContracts' 
				exclude 'jpos/config/simple/editor/**'			// is part of the JCL Editor, separated project 
				exclude 'jpos/res/**' 							// will later be copied to src/main/resources, see below 
				exclude 'META-INF/**'							// manifest will be genrated, see jar task
				exclude 'README*'								// old build stuff, not needed anymore
			}
			into "src/main/java"
		}
		copy {
			from (jclSourceDir) {
				include 'jpos/res/**'
				exclude 'jpos/res/images/**'					// is part of the JCL Editor, separated project 
				exclude '**/jpos.properties'					// must not be in teh resulting jar as it is integration specific
			}
			into "src/main/resources"
		}
		copy {
			includeEmptyDirs = false
			from (jclSourceDir) {
				include '**/jpos.properties'					// for documentation purposes only
			}
			into "src/doc"
		}
	}
}

/**
 * Helper method: Prepends given header to the content of the given file and writes the file back.
 */
private void prependToFile(File file, String header) {
	String contents = file.getText() 

	BufferedWriter writer = new BufferedWriter(new FileWriter(file))
	writer.write(header)
	writer.write(contents)
	writer.close()
}


// since JCL version 2.2.0 a license note was put ino each source
// however, the URL there is outdated; the following task updates it
 
def replaceInFile = {File file, from, to ->
	def fileContents = file.getText()
	def quotedStr = java.util.regex.Matcher.quoteReplacement(to) 
	fileContents = fileContents.replaceAll(from, quotedStr)
	file.write(fileContents)
	logger.debug("replacements done in file '$file'")
}


task replaceLicenseURL << {
	sourceSets.main.java.each {
		replaceInFile(it, 
			'http://oss.software.ibm.com/developerworks/opensource/license-cpl.html', 
			'http://www.ibm.com/developerworks/library/os-cpl.html')
		logger.info("license URL updated in file '$it'")
	} 
}